use tokio::io::AsyncWriteExt;

use super::super::i18n;
use crate::prelude::*;

#[derive(Clone, Copy, Debug, Default)]
pub struct SetupImf;
impl super::Step for SetupImf {
    #[tracing::instrument]
    async fn run(
        &self,
        settings: &crate::backend::settings::Settings,
        sender: relm4::Sender<crate::pages::InstallingPageMsg>,
    ) -> color_eyre::Result<()> {
        match &*CFG.edition {
            "plasma" | "kde" => write_fcitx5_profile(settings).await,
            _ => write_ibus_profile(settings).await,
        }
    }
}

macro_rules! awrite {
    ($f:ident <- $s:literal $($args:tt)*)=> {
        $f.write_all(format!($s $($args)*).as_bytes()).await
    };
}

async fn write_fcitx5_profile(
    crate::backend::settings::Settings {
        username,
        ims,
        kb_layout,
        kb_variant,
        ..
    }: &crate::backend::settings::Settings,
) -> color_eyre::Result<()> {
    let default_group_name = gettext("Default");
    tokio::fs::create_dir_all(format!("/home/{username}/.config/fcitx5/"))
        .await
        .wrap_err("cannot create ~/.config/fcitx5/")?;
    let profile_path = format!("/home/{username}/.config/fcitx5/profile");
    let mut profile = tokio::fs::File::create(&profile_path)
        .await
        .wrap_err("cannot make/open ~/.config/fcitx5/profile")?;

    awrite!(profile <-
        "\
            [Groups/0]\n\
            # Group Name\n\
            Name={default_group_name}\n\
            # Layout\n\
            Default Layout={kb_layout}{var}\n\
            # Default Input Method\n\
            DefaultIM=keyboard-{kb_layout}{var}\n\n\
        ",
        var=&kb_variant.as_ref().map(|variant| format!("-{variant}")).unwrap_or_default(),
    )?;

    for (i, &im) in ims.iter().enumerate() {
        awrite!(profile <-
            "\
                [Groups/0/Items/{i}]\n\
                # Name\n\
                Name={}\n\
                # Layout\n\
                Layout=\n\n\
            ",
            i18n::str_to_im(im).fcitx5_ref.unwrap()
        )?;
    }

    awrite!(profile <- "[GroupOrder]\n0={default_group_name}\n")?;

    drop(profile);

    let user = uzers::get_user_by_name(username).expect("can't find user");

    std::os::unix::fs::chown(
        &profile_path,
        Some(user.uid()),
        Some(user.primary_group_id()),
    )
    .wrap_err("cannot chown file")
    .with_note(|| format!("Path: {profile_path}"))?;

    Ok(())
}

async fn write_ibus_profile(
    crate::backend::settings::Settings { ims, .. }: &crate::backend::settings::Settings,
) -> color_eyre::Result<()> {
    let engines = ims
        .iter()
        .map(|s| format!("'{}'", i18n::str_to_im(s).ibus_ref.unwrap()))
        .join(", ");

    let mut f = tokio::fs::File::create("/etc/dconf/db/ibus.d/20-taidan-oobe")
        .await
        .wrap_err("cannot make/open /etc/dconf/db/ibus.d/20-taidan-oobe")?;

    awrite!(f <- "\
        # This file is generated by Taidan.\n\
        #\n\
        # The followings are IMEs and IMs selected by the user during OOBE.\n\
        #\n\
        # You may change this file, but you probably should create a new file with a number higher than 20.\n\
        # Remember to run `dconf update` after any changes.\n\
        #\n\n")?;

    awrite!(f <- "\
        [desktop/ibus/general]\n\
        use-system-keyboard-layout=true\n\
        engines-order=[{engines}]\n\
        preload-engines[{engines}]\n")?;

    Ok(())
}
